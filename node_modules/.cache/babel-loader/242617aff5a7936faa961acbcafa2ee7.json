{"ast":null,"code":"// canvas-confetti v0.3.0 built on 2019-06-23T13:46:05.478Z\nvar module = {}; // source content\n\n(function () {\n  var frame, cancel;\n\n  (function () {\n    if (window.requestAnimationFrame && window.cancelAnimationFrame) {\n      frame = window.requestAnimationFrame;\n      cancel = window.cancelAnimationFrame;\n    } else {\n      ['webkit', 'moz', 'o', 'ms'].forEach(function (name) {\n        if (frame && cancel) {\n          return;\n        }\n\n        var framename = name + 'RequestAnimationFrame';\n        var cancelname = name + 'CancelAnimationFrame';\n\n        if (window[framename] && window[cancelname]) {\n          frame = window[framename];\n          cancel = window[cancelname];\n        }\n      });\n    }\n\n    if (!(frame && cancel)) {\n      frame = function (cb) {\n        return window.setTimeout(cb, 1000 / 60);\n      };\n\n      cancel = function (timer) {\n        return window.clearTimeout(timer);\n      };\n    }\n  })();\n\n  var defaults = {\n    particleCount: 50,\n    angle: 90,\n    spread: 45,\n    startVelocity: 45,\n    decay: 0.9,\n    ticks: 200,\n    x: 0.5,\n    y: 0.5,\n    zIndex: 100,\n    colors: ['#26ccff', '#a25afd', '#ff5e7e', '#88ff5a', '#fcff42', '#ffa62d', '#ff36ff']\n  };\n\n  function noop() {} // create a promise if it exists, otherwise, just\n  // call the function directly\n\n\n  function promise(func) {\n    if (module.exports.Promise) {\n      return new module.exports.Promise(func);\n    }\n\n    func(noop, noop);\n    return null;\n  }\n\n  function convert(val, transform) {\n    return transform ? transform(val) : val;\n  }\n\n  function isOk(val) {\n    return !(val === null || val === undefined);\n  }\n\n  function prop(options, name, transform) {\n    return convert(options && isOk(options[name]) ? options[name] : defaults[name], transform);\n  }\n\n  function toDecimal(str) {\n    return parseInt(str, 16);\n  }\n\n  function hexToRgb(str) {\n    var val = String(str).replace(/[^0-9a-f]/gi, '');\n\n    if (val.length < 6) {\n      val = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\n    }\n\n    return {\n      r: toDecimal(val.substring(0, 2)),\n      g: toDecimal(val.substring(2, 4)),\n      b: toDecimal(val.substring(4, 6))\n    };\n  }\n\n  function getOrigin(options) {\n    var origin = prop(options, 'origin', Object);\n    origin.x = prop(origin, 'x', Number);\n    origin.y = prop(origin, 'y', Number);\n    return origin;\n  }\n\n  function setCanvasWindowSize(canvas) {\n    canvas.width = document.documentElement.clientWidth;\n    canvas.height = document.documentElement.clientHeight;\n  }\n\n  function setCanvasRectSize(canvas) {\n    var rect = canvas.getBoundingClientRect();\n    canvas.width = rect.width;\n    canvas.height = rect.height;\n  }\n\n  function getCanvas(zIndex) {\n    var canvas = document.createElement('canvas');\n    setCanvasWindowSize(canvas);\n    canvas.style.position = 'fixed';\n    canvas.style.top = '0px';\n    canvas.style.left = '0px';\n    canvas.style.pointerEvents = 'none';\n    canvas.style.zIndex = zIndex;\n    return canvas;\n  }\n\n  function randomPhysics(opts) {\n    var radAngle = opts.angle * (Math.PI / 180);\n    var radSpread = opts.spread * (Math.PI / 180);\n    return {\n      x: opts.x,\n      y: opts.y,\n      wobble: Math.random() * 10,\n      velocity: opts.startVelocity * 0.5 + Math.random() * opts.startVelocity,\n      angle2D: -radAngle + (0.5 * radSpread - Math.random() * radSpread),\n      tiltAngle: Math.random() * Math.PI,\n      color: hexToRgb(opts.color),\n      tick: 0,\n      totalTicks: opts.ticks,\n      decay: opts.decay,\n      random: Math.random() + 5,\n      tiltSin: 0,\n      tiltCos: 0,\n      wobbleX: 0,\n      wobbleY: 0\n    };\n  }\n\n  function updateFetti(context, fetti) {\n    fetti.x += Math.cos(fetti.angle2D) * fetti.velocity;\n    fetti.y += Math.sin(fetti.angle2D) * fetti.velocity + 3; // + gravity\n\n    fetti.wobble += 0.1;\n    fetti.velocity *= fetti.decay;\n    fetti.tiltAngle += 0.1;\n    fetti.tiltSin = Math.sin(fetti.tiltAngle);\n    fetti.tiltCos = Math.cos(fetti.tiltAngle);\n    fetti.random = Math.random() + 5;\n    fetti.wobbleX = fetti.x + 10 * Math.cos(fetti.wobble);\n    fetti.wobbleY = fetti.y + 10 * Math.sin(fetti.wobble);\n    var progress = fetti.tick++ / fetti.totalTicks;\n    var x1 = fetti.x + fetti.random * fetti.tiltCos;\n    var y1 = fetti.y + fetti.random * fetti.tiltSin;\n    var x2 = fetti.wobbleX + fetti.random * fetti.tiltCos;\n    var y2 = fetti.wobbleY + fetti.random * fetti.tiltSin;\n    context.fillStyle = 'rgba(' + fetti.color.r + ', ' + fetti.color.g + ', ' + fetti.color.b + ', ' + (1 - progress) + ')';\n    context.beginPath();\n    context.moveTo(Math.floor(fetti.x), Math.floor(fetti.y));\n    context.lineTo(Math.floor(fetti.wobbleX), Math.floor(y1));\n    context.lineTo(Math.floor(x2), Math.floor(y2));\n    context.lineTo(Math.floor(x1), Math.floor(fetti.wobbleY));\n    context.closePath();\n    context.fill();\n    return fetti.tick < fetti.totalTicks;\n  }\n\n  function animate(canvas, fettis, isLibCanvas, allowResize, done) {\n    var animatingFettis = fettis.slice();\n    var context = canvas.getContext('2d');\n    var width = canvas.width;\n    var height = canvas.height;\n    var resizer = isLibCanvas ? setCanvasWindowSize : setCanvasRectSize;\n    var animationFrame;\n    var destroy;\n\n    function onResize() {\n      // don't actually query the size here, since this\n      // can execute frequently and rapidly\n      width = height = null;\n    }\n\n    var prom = promise(function (resolve) {\n      function onDone() {\n        animationFrame = destroy = null;\n\n        if (allowResize) {\n          window.removeEventListener('resize', onResize);\n        }\n\n        context.clearRect(0, 0, width, height);\n        done();\n        resolve();\n      }\n\n      function update() {\n        if (!width && !height) {\n          resizer(canvas);\n          width = canvas.width;\n          height = canvas.height;\n        }\n\n        context.clearRect(0, 0, width, height);\n        animatingFettis = animatingFettis.filter(function (fetti) {\n          return updateFetti(context, fetti);\n        });\n\n        if (animatingFettis.length) {\n          animationFrame = frame(update);\n        } else {\n          onDone();\n        }\n      }\n\n      animationFrame = frame(update);\n      destroy = onDone;\n    });\n\n    if (allowResize) {\n      window.addEventListener('resize', onResize, false);\n    }\n\n    return {\n      addFettis: function (fettis) {\n        animatingFettis = animatingFettis.concat(fettis);\n        return prom;\n      },\n      canvas: canvas,\n      promise: prom,\n      reset: function () {\n        if (animationFrame) {\n          cancel(animationFrame);\n        }\n\n        if (destroy) {\n          destroy();\n        }\n      }\n    };\n  }\n\n  function confettiCannon(canvas, globalOpts) {\n    var isLibCanvas = !canvas;\n    var allowResize = !!prop(globalOpts || {}, 'resize');\n    var resized = false;\n    var animationObj;\n\n    function fire(options) {\n      var particleCount = prop(options, 'particleCount', Math.floor);\n      var angle = prop(options, 'angle', Number);\n      var spread = prop(options, 'spread', Number);\n      var startVelocity = prop(options, 'startVelocity', Number);\n      var decay = prop(options, 'decay', Number);\n      var colors = prop(options, 'colors');\n      var ticks = prop(options, 'ticks', Number);\n      var zIndex = prop(options, 'zIndex', Number);\n      var origin = getOrigin(options);\n      var temp = particleCount;\n      var fettis = [];\n\n      if (isLibCanvas) {\n        canvas = animationObj ? animationObj.canvas : getCanvas(zIndex);\n      } else if (allowResize && !resized) {\n        // initialize the size of a user-supplied canvas\n        setCanvasRectSize(canvas);\n        resized = true;\n      }\n\n      var startX = canvas.width * origin.x;\n      var startY = canvas.height * origin.y;\n\n      while (temp--) {\n        fettis.push(randomPhysics({\n          x: startX,\n          y: startY,\n          angle: angle,\n          spread: spread,\n          startVelocity: startVelocity,\n          color: colors[temp % colors.length],\n          ticks: ticks,\n          decay: decay\n        }));\n      } // if we have a previous canvas already animating,\n      // add to it\n\n\n      if (animationObj) {\n        return animationObj.addFettis(fettis);\n      }\n\n      if (isLibCanvas) {\n        document.body.appendChild(canvas);\n      }\n\n      animationObj = animate(canvas, fettis, isLibCanvas, isLibCanvas || allowResize, function () {\n        animationObj = null;\n\n        if (isLibCanvas) {\n          document.body.removeChild(canvas);\n        }\n      });\n      return animationObj.promise;\n    }\n\n    fire.reset = function () {\n      if (animationObj) {\n        animationObj.reset();\n      }\n    };\n\n    return fire;\n  }\n\n  module.exports = confettiCannon();\n  module.exports.create = confettiCannon;\n  module.exports.Promise = window.Promise || null;\n})(); // end source content\n\n\nexport default module.exports;\nexport let create = module.exports.create;","map":null,"metadata":{},"sourceType":"module"}