{"ast":null,"code":"var _jsxFileName = \"/Users/quizmox/Desktop/frontend/src/components/StudentList.js\";\n// Page provides info on students belonging to teacher, and options to CRUD students\n// GETS all <Student>s with teacherName matching logged in teacher\n// Maps all <Student>s into list of components\n// Passes up props of selected student to <Home>, for SelectedInfo\n//\nimport React, { Component } from \"react\"; // import * as API from \"../helpers/API\";\n\nimport { withRouter } from \"react-router\";\nimport Add from \"./Add\";\nimport axios from \"axios\";\nimport Student from \"./Student\"; // import PropTypes from \"prop-types\";\n// import './CustomerList.css';\n\nclass StudentList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getStudents = () => {\n      axios.get(\"/students\").then(res => {\n        console.log(res);\n        this.setState(state => ({\n          students: res.data\n        }));\n      }).then(console.log(\"Retrieving students\")).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.onEnterName = event => {\n      const name = event.target.value;\n      this.setState(state => ({\n        newStudent: name\n      }));\n      console.log(this.state.newStudent);\n    };\n\n    this.state = {\n      newStudent: \"\",\n      students: []\n    };\n    this.onAddStudent = this.onAddStudent.bind(this);\n  }\n\n  componentDidMount() {\n    this.getStudents();\n  }\n\n  shouldComponentMount(nextState) {\n    return this.state.students.length !== nextState.students.length ? true : false;\n  }\n\n  async onAddStudent(event) {\n    event.preventDefault();\n\n    if (this.state.newStudent) {\n      const student = {\n        name: this.state.newStudent,\n        teacher: this.props.user.name\n      };\n      console.log(student);\n      await axios.post(\"/students/\", student).then(res => {\n        console.log(res.data);\n      }).then(this.getStudents()).then(this.setState(state => ({\n        newStudent: \"\"\n      }))).catch(err => console.log(err));\n    } else {\n      alert(\"Please enter student name\");\n    }\n  }\n\n  render(routerprops) {\n    const allStudents = this.state.students.map((student, idx) => {\n      console.log(student);\n      return React.createElement(Student, Object.assign({}, routerprops, {\n        key: idx,\n        student: student,\n        select: this.props.select,\n        getStudents: this.getStudents,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }));\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"My Students\"), this.state.students.length > 0 ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"students\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, allStudents)) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"\\\"You have no students!\\\"\"), React.createElement(Add, {\n      onAddStudent: this.onAddStudent,\n      onEnterName: this.onEnterName,\n      newStudent: this.state.newStudent,\n      className: \"student_add btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }));\n  }\n\n} // StudentList.propTypes = {\n//\n// };\n\n\nexport default withRouter(StudentList);","map":{"version":3,"sources":["/Users/quizmox/Desktop/frontend/src/components/StudentList.js"],"names":["React","Component","withRouter","Add","axios","Student","StudentList","constructor","props","getStudents","get","then","res","console","log","setState","state","students","data","catch","err","onEnterName","event","name","target","value","newStudent","onAddStudent","bind","componentDidMount","shouldComponentMount","nextState","length","preventDefault","student","teacher","user","post","alert","render","routerprops","allStudents","map","idx","select"],"mappings":"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","sourcesContent":["// Page provides info on students belonging to teacher, and options to CRUD students\n// GETS all <Student>s with teacherName matching logged in teacher\n// Maps all <Student>s into list of components\n// Passes up props of selected student to <Home>, for SelectedInfo\n//\n\nimport React, { Component } from \"react\";\n// import * as API from \"../helpers/API\";\nimport { withRouter } from \"react-router\";\nimport Add from \"./Add\";\nimport axios from \"axios\";\nimport Student from \"./Student\";\n// import PropTypes from \"prop-types\";\n// import './CustomerList.css';\n\nclass StudentList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      newStudent: \"\",\n      students: []\n    };\n    this.onAddStudent = this.onAddStudent.bind(this);\n  }\n\n  getStudents = () => {\n    axios\n      .get(\"/students\")\n      .then(res => {\n        console.log(res);\n        this.setState(state => ({ students: res.data }));\n      })\n      .then(console.log(\"Retrieving students\"))\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  componentDidMount() {\n    this.getStudents();\n  }\n\n  shouldComponentMount(nextState) {\n    return this.state.students.length !== nextState.students.length\n      ? true\n      : false;\n  }\n\n  onEnterName = event => {\n    const name = event.target.value;\n    this.setState(state => ({ newStudent: name }));\n    console.log(this.state.newStudent);\n  };\n\n  async onAddStudent(event) {\n    event.preventDefault();\n    if (this.state.newStudent) {\n      const student = {\n        name: this.state.newStudent,\n        teacher: this.props.user.name\n      };\n      console.log(student);\n      await axios\n        .post(\"/students/\", student)\n        .then(res => {\n          console.log(res.data);\n        })\n        .then(this.getStudents())\n        .then(this.setState(state => ({ newStudent: \"\" })))\n        .catch(err => console.log(err));\n    } else {\n      alert(\"Please enter student name\");\n    }\n  }\n\n  render(routerprops) {\n    const allStudents = this.state.students.map((student, idx) => {\n      console.log(student);\n      return (\n        <Student\n          {...routerprops}\n          key={idx}\n          student={student}\n          select={this.props.select}\n          getStudents={this.getStudents}\n        />\n      );\n    });\n\n    return (\n      <div>\n        <h2>My Students</h2>\n        {this.state.students.length > 0 ? (\n          <div>\n            <div className=\"students\">{allStudents}</div>\n          </div>\n        ) : (\n          <div>\"You have no students!\"</div>\n        )}\n        <Add\n          onAddStudent={this.onAddStudent}\n          onEnterName={this.onEnterName}\n          newStudent={this.state.newStudent}\n          className=\"student_add btn btn-primary\"\n        />\n      </div>\n    );\n  }\n}\n\n// StudentList.propTypes = {\n//\n// };\n\nexport default withRouter(StudentList);\n"]},"metadata":{},"sourceType":"module"}